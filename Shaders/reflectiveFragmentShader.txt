#version 410

in vec3 position_eye;
in vec3 normal_eye;
in vec3 light_position_eye; 
in vec3 camPos;

//************//
//OBJECT COLOR//
//************//
uniform vec3 Ks;
uniform vec3 Kd;
uniform vec3 Ka;
uniform float specular_exponent;

//***********//
//LIGHT COLOR//
//***********//
uniform vec3 Ls; //white specular color
uniform vec3 Ld; // dull white diffuse light 
uniform vec3 La;  // grey ambient color

uniform mat4 view;
uniform samplerCube cube_texture;

out vec4 fragment_color;

void main()
{    
	/* reflect ray around normal from eye to surface */
	vec3 incident_eye = normalize (position_eye);
	vec3 normal = normalize (normal_eye);

	vec3 reflected = reflect (incident_eye, normal);
	// convert from eye to world space
	reflected = vec3 (inverse (view) * vec4 (reflected, 0.0));

	fragment_color = texture(cube_texture, reflected);
}